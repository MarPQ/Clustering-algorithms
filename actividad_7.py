# -*- coding: utf-8 -*-
"""Actividad_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19SVWjngq_HZK9U0lBxXhzxFE4z8ol66C
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics.cluster import adjusted_rand_score

data = pd.read_csv('df_agrupacion_6.cvs')
#print(data)

x = np.asanyarray(data.drop(columns=['y']))
y = np.asanyarray(data[['y']])

n = np.max(y)+1
print('\n n =',n)

plt.figure()
plt.grid()

plt.plot(x[:,0],x[:,1],'bo')

plt.xlabel('X1')
plt.ylabel('X2')

plt.show()

def grafica (model,n,x,y,t):

  plt.figure()
  plt.grid()
  plt.xlabel('X1')
  plt.ylabel('X2')
  plt.title(t)
  
  for i in range(n):
    plt.plot(x[y==i,0],x[y==i,1],'o')

  plt.plot(x[y==-1,0],x[y==-1,1],'rx')
  
  plt.show()

from sklearn.cluster import KMeans

n = 3

model = KMeans(n_clusters=n)
model.fit(x)

y_pred = model.predict(x)

grafica(model,n,x,y_pred,'KMeans')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import AffinityPropagation

model = AffinityPropagation(damping=0.97,max_iter=300,convergence_iter=12)
model.fit(x)

y_pred = model.predict(x)

n = np.max(model.labels_)+1

grafica(model,n,x,y_pred,'AffinityPropagation')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import MeanShift

model = MeanShift(max_iter=300)
model.fit(x)

y_pred = model.predict(x)

n = np.max(model.labels_)+1

grafica(model,n,x,y_pred,'MeanShift')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import SpectralClustering

n = 3

model = SpectralClustering(n_clusters=n)
model.fit(x)

y_pred = model.labels_

grafica(model,n,x,y_pred,'SpectralClustering')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import AgglomerativeClustering

n = 3

model = AgglomerativeClustering(n_clusters=n)
model.fit(x)

y_pred = model.labels_

grafica(model,n,x,y_pred,'AgglomerativeClustering')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import DBSCAN

model = DBSCAN(eps=1.3)
model.fit(x)

y_pred = model.labels_

n = np.max(model.labels_)+1

grafica(model,n,x,y_pred,'DBSCAN')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import OPTICS

model = OPTICS(min_cluster_size=0.29)
model.fit(x)

y_pred = model.labels_

n = np.max(model.labels_)+1

grafica(model,n,x,y_pred,'OPTICS')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.mixture import GaussianMixture

n = 3

model = GaussianMixture(n_components=n)
model.fit(x)

y_pred = model.predict(x)

grafica(model,n,x,y_pred,'GaussianMixture')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)

from sklearn.cluster import Birch

n = 3

model = Birch(n_clusters=n,threshold=0.1)
model.fit(x)

y_pred = model.predict(x)

grafica(model,n,x,y_pred,'GaussianMixture')

score = adjusted_rand_score(y.ravel(),y_pred)
print('Score = ', score)